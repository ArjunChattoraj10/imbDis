agg_subset3 = agg_ny[c(6,41:45)]
agg_subset3 = agg_ny[c(6,41:45)]
agg_subset3
lm3 = glm(prefers_brand ~ ., data = agg_subset3, family = "binomial")
summary(lm3)
summary(lm1)
agg_subset4 = agg_ny[c(6,37:40)]
lm4 = glm(prefers_brand ~ ., data = agg_subset4, family = "binomial")
summary(lm4)
agg_subset4 = agg_ny[c(6,37:40)]
b
b
lm4 = glm(prefers_brand ~ ., data = agg_subset4, family = "binomial")
summary(lm4)
agg_subset4 = agg_ny[c(6,37:40)]
lm4 = glm(prefers_brand ~ ., data = agg_subset4, family = "binomial")
agg_subset4 = agg_ny[c(6,38:40)]
lm4 = glm(prefers_brand ~ ., data = agg_subset4, family = "binomial")
summary(lm4)
agg_subset5 = agg_ny[c(6,33:36)]
lm5 = glm(prefers_brand ~ ., data = agg_subset5, family = "binomial")
summary(lm5)
View(aggregate)
summary(lm3)
summary(lm1)
lm2 = glm(prefers_brand ~ ., data = agg_subset2, family = "binomial")
summary(lm2)
agg_subset2 = agg_ny[c(6,52:59)]
lm2 = glm(prefers_brand ~ ., data = agg_subset2, family = "binomial")
summary(lm2)
agg_subset2 = agg_ny[c(6,52:56)]
lm2 = glm(prefers_brand ~ ., data = agg_subset2, family = "binomial")
summary(lm2)
getwd()
dat = read_csv("../Medicare_Provider_Utilization_and_Payment_Data__2013_Part_D_Prescriber.csv/Medicare_Provider_Utilization_and_Payment_Data__2013_Part_D_Prescriber.csv")
library(readr)
dat = read_csv("../Medicare_Provider_Utilization_and_Payment_Data__2013_Part_D_Prescriber.csv/Medicare_Provider_Utilization_and_Payment_Data__2013_Part_D_Prescriber.csv")
View(dat)
library(readr)
library(dplyr)
library(tidyr)
prescription = read_csv("Medicare_Provider_Utilization_and_Payment_Data__2014_Part_D_Prescriber.csv")
aggregate = read_csv("Medicare_Physician_and_Other_Supplier_National_Provider_Identifier__NPI__Aggregate_Report__Calendar_Year_2014.csv")
pres_summary = read_csv("Medicare_Provider_Utilization_and_Payment_Data__Part_D_Prescriber_Summary_Table_CY2014.csv")
pres_nex_ny = prescription[prescription$drug_name == "NEXIUM" & prescription$nppes_provider_state == "NY",]
pres_nex_ny_gastro = pres_nex_ny[pres_nex_ny$specialty_description == "Gastroenterology" |
pres_nex_ny$specialty_description == "Internal Medicine",]
length(unique(pres_nex_ny_gastro$npi))
nrow(pres_nex_ny_gastro)
joined = inner_join(pres_nex_ny_gastro, pres_summary, by = "npi")
joined$specialized = ifelse(joined$specialty_description == "Gastroenterology", 1, 0)
pres_nex_ny_gastro
pres_nex_ny_gastro
View(joined)
pres_nex_ny_gastro$specialty = ifelse(pres_nex_ny_gastro$specialty_description == "Gastroenterology", 1, 0)
length(unique(pres_nex_ny_gastro$npi))
nrow(pres_nex_ny_gastro)
joined = inner_join(pres_nex_ny_gastro[c(npi, drug_name, generic_name, specialty)],
pres_summary, by = "npi")
pres_nex_ny_gastro[c(npi, drug_name, generic_name, specialty)]
pres_nex_ny_gastro[c("npi", "drug_name", "generic_name", "specialty")]
joined = inner_join(pres_nex_ny_gastro[c("npi", "drug_name", "generic_name", "specialty")],
pres_summary, by = "npi")
joined$zip3 = substr(joined$nppes_provider_zip5, 1, 3)
#reading in the datasets
prescriber = read.csv(url("https://data.cms.gov/api/views/mxq9-aiiw/rows.csv?accessType=DOWNLOAD"))
prescriber
pres_summary = read_csv("https://data.cms.gov/api/views/mxq9-aiiw/rows.csv?accessType=DOWNLOAD")
prescriber
# subset the data to only include NEXIUM with providers from New York
pres_nex_ny = prescriber[prescriber$drug_name == "NEXIUM" & prescriber$nppes_provider_state == "NY",]
# define the response to be a 1 for specialized (Gastroenterology)
# and 0 for general (Internal Medicine)
pres_nex_ny_gastro = pres_nex_ny[pres_nex_ny$specialty_description == "Gastroenterology" |
pres_nex_ny$specialty_description == "Internal Medicine",]
pres_summary = read.csv("https://data.cms.gov/api/views/mxq9-aiiw/rows.csv?accessType=DOWNLOAD")
# subset the data to only include NEXIUM with providers from New York
pres_nex_ny = prescriber[prescriber$drug_name == "NEXIUM" & prescriber$nppes_provider_state == "NY",]
prescriber$drug_name
prescriber
prescriber$beneficiary_dual_count
# reading in the datasets
# consider downloading the Part D Prescriber and reading them in offline
# using the URLs directly takes too long
# warning: datasets are large
prescriber = read.csv("https://data.cms.gov/api/views/77gb-8z53/rows.csv?accessType=DOWNLOAD")
library(vroom)
# reading in the datasets
# consider downloading the Part D Prescriber and reading them in offline
# using the URLs directly takes too long
# warning: datasets are large
?vroom
prescriber = vroom(url("https://data.cms.gov/api/views/77gb-8z53/rows.csv?accessType=DOWNLOAD"))
View(prescriber)
pres_summary = vroom(url("https://data.cms.gov/api/views/mxq9-aiiw/rows.csv?accessType=DOWNLOAD"))
pres_summary = vroom(url("https://data.cms.gov/api/views/mxq9-aiiw/rows.csv"))
pres_summary = vroom(url("https://data.cms.gov/api/views/mxq9-aiiw/rows.csv?accessType=DOWNLOAD"))
library(data.table)
pres_summary = fread(url("https://data.cms.gov/api/views/mxq9-aiiw/rows.csv?accessType=DOWNLOAD"))
pres_summary = fread("https://data.cms.gov/api/views/mxq9-aiiw/rows.csv?accessType=DOWNLOAD")
pres_summary
View(pres_summary)
is.name(pres_summary$nppes_provider_mi)
is.na(pres_summary$nppes_provider_mi)
pres_summary = fread("https://data.cms.gov/api/views/mxq9-aiiw/rows.csv?accessType=DOWNLOAD",
na.strings = "NA")
pres_summary$specialty_description
# reading in the datasets
# use of vroom since datasets are very large (prescriber ~ 3 GB)
# time elapsed on personal computer - ~10 minutes at a rate of 4.52 MB/s
prescriber = fread(url("https://data.cms.gov/api/views/77gb-8z53/rows.csv??$query=SELECT%20npi,nppes_provider_state,drug_name,generic_name%20WHERE%20drug_name%20=%20%27NEXIUM%27%20AND%20nppes_provider_state%20=%20'NY'"))
# reading in the datasets
# use of vroom since datasets are very large (prescriber ~ 3 GB)
# time elapsed on personal computer - ~10 minutes at a rate of 4.52 MB/s
prescriber = fread("https://data.cms.gov/api/views/77gb-8z53/rows.csv??$query=SELECT%20npi,nppes_provider_state,drug_name,generic_name%20WHERE%20drug_name%20=%20%27NEXIUM%27%20AND%20nppes_provider_state%20=%20'NY'")
# reading in the datasets
# use of vroom since datasets are very large (prescriber ~ 3 GB)
# time elapsed on personal computer - ~10 minutes at a rate of 4.52 MB/s
prescriber = fread("https://data.cms.gov/api/views/77gb-8z53/rows.csv?$query=SELECT%20npi,nppes_provider_state,drug_name,generic_name%20WHERE%20drug_name%20=%20%27NEXIUM%27%20AND%20nppes_provider_state%20=%20'NY'")
# reading in the datasets
# use of vroom since datasets are very large (prescriber ~ 3 GB)
# time elapsed on personal computer - ~10 minutes at a rate of 4.52 MB/s
prescriber = fread("https://data.cms.gov/api/views/77gb-8z53/rows.csv?$query=SELECT%20npi,nppes_provider_state,drug_name,generic_name%20WHERE%20drug_name%20=%20%27NEXIUM%27%20AND%20nppes_provider_state%20=%20'NY'")
# reading in the datasets
# use of vroom since datasets are very large (prescriber ~ 3 GB)
# time elapsed on personal computer - ~10 minutes at a rate of 4.52 MB/s
prescriber = fread("https://data.cms.gov/api/views/77gb-8z53/rows.csv??$query=SELECT%20npi,nppes_provider_state,drug_name,generic_name%20WHERE%20drug_name%20=%20%27NEXIUM%27%20AND%20nppes_provider_state%20=%20'NY'")
# reading in the datasets
# use of vroom since datasets are very large (prescriber ~ 3 GB)
# time elapsed on personal computer - ~10 minutes at a rate of 4.52 MB/s
prescriber = fread("https://data.cms.gov/api/views/77gb-8z53/rows.csv?$query=SELECT%20npi,nppes_provider_state,drug_name,generic_name%20WHERE%20drug_name%20=%20%27NEXIUM%27%20AND%20nppes_provider_state%20=%20'NY'")
pres_summary = fread("https://data.cms.gov/api/views/mxq9-aiiw/rows.csv?accessType=DOWNLOAD",
na.strings = "NA")
library(data.table)
# reading in the datasets
# use of vroom since datasets are very large (prescriber ~ 3 GB)
# time elapsed on personal computer - ~10 minutes at a rate of 4.52 MB/s
prescriber = fread("https://data.cms.gov/api/views/77gb-8z53/rows.csv?$query=SELECT%20npi,nppes_provider_state,drug_name,generic_name%20WHERE%20drug_name%20=%20%27NEXIUM%27%20AND%20nppes_provider_state%20=%20'NY'")
# reading in the datasets
# use of vroom since datasets are very large (prescriber ~ 3 GB)
# time elapsed on personal computer - ~10 minutes at a rate of 4.52 MB/s
prescriber = fread("https://data.cms.gov/api/views/77gb-8z53/rows.csv?$query=SELECT%20npi,nppes_provider_state,drug_name,generic_name%20WHERE%20drug_name%20=%20%27NEXIUM%27%20AND%20nppes_provider_state%20=%20'NY'")
# reading in the datasets
# use of vroom since datasets are very large (prescriber ~ 3 GB)
# time elapsed on personal computer - ~10 minutes at a rate of 4.52 MB/s
prescriber = fread("https://data.cms.gov/resource/77gb-8z53.csv?$query=SELECT%20npi,nppes_provider_state,drug_name,generic_name%20WHERE%20drug_name%20=%20%27NEXIUM%27%20AND%20nppes_provider_state%20=%20'NY'")
library(data.table)
# library(readr)
# library(vroom)
library(dplyr)
# reading in the datasets
# use of vroom since datasets are very large (prescriber ~ 3 GB)
# time elapsed on personal computer - ~10 minutes at a rate of 4.52 MB/s
prescriber = fread("https://data.cms.gov/resource/77gb-8z53.csv?$query=SELECT%20npi,nppes_provider_state,drug_name,generic_name%20WHERE%20drug_name%20=%20%27NEXIUM%27%20AND%20nppes_provider_state%20=%20'NY'")
View(prescriber)
# reading in the datasets
# use of vroom since datasets are very large (prescriber ~ 3 GB)
# time elapsed on personal computer - ~10 minutes at a rate of 4.52 MB/s
prescriber = fread("https://data.cms.gov/resource/77gb-8z53.json?$select=npi,nppes_provider_state,drug_name,generic_name&$where=drug_name=%27NEXIUM%27")
View(prescriber)
# reading in the datasets
# use of vroom since datasets are very large (prescriber ~ 3 GB)
# time elapsed on personal computer - ~10 minutes at a rate of 4.52 MB/s
prescriber = fread("https://data.cms.gov/resource/77gb-8z53.csv?$select=npi,nppes_provider_state,drug_name,generic_name&$where=drug_name=%27NEXIUM%27")
View(prescriber)
# reading in the datasets
# use of vroom since datasets are very large (prescriber ~ 3 GB)
# time elapsed on personal computer - ~10 minutes at a rate of 4.52 MB/s
prescriber = fread("https://data.cms.gov/resource/77gb-8z53.csv")
View(prescriber)
# reading in the datasets
# use of vroom since datasets are very large (prescriber ~ 3 GB)
# time elapsed on personal computer - ~10 minutes at a rate of 4.52 MB/s
prescriber = fread("https://data.cms.gov/resource/77gb-8z53/rows.csv")
# reading in the datasets
# use of vroom since datasets are very large (prescriber ~ 3 GB)
# time elapsed on personal computer - ~10 minutes at a rate of 4.52 MB/s
prescriber = fread("https://data.cms.gov/api/views/77gb-8z53/rows.csv?accessType=DOWNLOAD",
na.strings = "NA")
View(prescriber)
pres_summary = fread("https://data.cms.gov/api/views/mxq9-aiiw/rows.csv?accessType=DOWNLOAD",
na.strings = "NA")
# subset the data to only include NEXIUM with providers from New York
pres_nex_ny = prescriber[prescriber$drug_name == "NEXIUM" & prescriber$nppes_provider_state == "NY",]
# subset the data to only include NEXIUM with providers from New York
pres_nex_ny = prescriber[prescriber$drug_name == "NEXIUM" &
prescriber$nppes_provider_state == "NY" &
pres_nex_ny$specialty_description == "Gastroenterology" |
pres_nex_ny$specialty_description == "Internal Medicine",]
View(pres_nex_ny)
# subset the data to only include NEXIUM with providers from New York
pres_nex_ny = prescriber[prescriber$drug_name == "NEXIUM" &
prescriber$nppes_provider_state == "NY" &
pres_nex_ny$specialty_description == "Gastroenterology" |
pres_nex_ny$specialty_description == "Internal Medicine",]
# subset the data to only include NEXIUM with providers from New York
pres_nex_ny = prescriber[prescriber$drug_name == "NEXIUM" &
prescriber$nppes_provider_state == "NY",]
# define the response to be a 1 for specialized (Gastroenterology)
# and 0 for general (Internal Medicine)
pres_nex_ny_gastro = pres_nex_ny[pres_nex_ny$specialty_description == "Gastroenterology" |
pres_nex_ny$specialty_description == "Internal Medicine",]
pres_nex_ny_gastro$specialty = ifelse(pres_nex_ny_gastro$specialty_description == "Gastroenterology", 1, 0)
length(unique(pres_nex_ny_gastro$npi))
nrow(pres_nex_ny_gastro)
# npi is the joining id
# the drug name, generic name and specialty (response) are the only variables
# unique to the presriber dataset
joined = inner_join(pres_nex_ny_gastro[c("npi", "drug_name", "generic_name", "specialty")],
pres_summary, by = "npi")
pres_summary
# npi is the joining id
# the drug name, generic name and specialty (response) are the only variables
# unique to the presriber dataset
joined = inner_join(pres_nex_ny_gastro[c("npi", "drug_name", "generic_name", "specialty")],
pres_summary, by = "npi")
library(dplyr)
# npi is the joining id
# the drug name, generic name and specialty (response) are the only variables
# unique to the presriber dataset
joined = inner_join(pres_nex_ny_gastro[c("npi", "drug_name", "generic_name", "specialty")],
pres_summary, on = "npi")
?data.table
pres_nex_ny_gastro[c("npi", "drug_name", "generic_name", "specialty")]
pres_nex_ny_gastro[c(npi, drug_name, generic_name, specialty)]
pres_nex_ny_gastro[,c(npi, drug_name, generic_name, specialty)]
# npi is the joining id
# the drug name, generic name and specialty (response) are the only variables
# unique to the presriber dataset
joined = inner_join(pres_nex_ny_gastro[,c(npi, drug_name, generic_name, specialty)],
pres_summary, by = "npi")
pres_nex_ny_gastro[,c(npi, drug_name, generic_name, specialty)]
# npi is the joining id
# the drug name, generic name and specialty (response) are the only variables
# unique to the presriber dataset
joined = inner_join(pres_nex_ny_gastro[,c("npi", "drug_name", "generic_name", "specialty")],
pres_summary, by = "npi")
pres_nex_ny_gastro[,c("npi", "drug_name", "generic_name", "specialty")]
# reading in the datasets
# use of fread since datasets are very large
# argument specified to read data as data.frame
prescriber = fread("https://data.cms.gov/api/views/77gb-8z53/rows.csv?accessType=DOWNLOAD",
na.strings = "NA", data.table = FALSE)
pres_summary = fread("https://data.cms.gov/api/views/mxq9-aiiw/rows.csv?accessType=DOWNLOAD",
na.strings = "NA", data.table = FALSE)
View(prescriber)
# subset the data to only include NEXIUM with providers from New York
pres_nex_ny = prescriber[prescriber$drug_name == "NEXIUM" &
prescriber$nppes_provider_state == "NY",]
# define the response to be a 1 for specialized (Gastroenterology)
# and 0 for general (Internal Medicine)
pres_nex_ny_gastro = pres_nex_ny[pres_nex_ny$specialty_description == "Gastroenterology" |
pres_nex_ny$specialty_description == "Internal Medicine",]
pres_nex_ny_gastro$specialty = ifelse(pres_nex_ny_gastro$specialty_description == "Gastroenterology", 1, 0)
length(unique(pres_nex_ny_gastro$npi))
nrow(pres_nex_ny_gastro)
# npi is the joining id
# the drug name, generic name and specialty (response) are the only variables
# unique to the presriber dataset
joined = inner_join(pres_nex_ny_gastro[c("npi", "drug_name", "generic_name", "specialty")],
pres_summary, by = "npi")
joined$zip3 = substr(joined$nppes_provider_zip5, 1, 3)
View(joined)
joined$total_drug_cost
library(data.table)
# reading in the datasets
# use of fread since datasets are very large
# argument specified to read data as data.frame
prescriber = fread("https://data.cms.gov/api/views/465c-49pb/rows.csv?accessType=DOWNLOAD",
na.strings = "NA", data.table = FALSE)
# subset the data to only include NEXIUM with providers from New York
pres_nex_ny = prescriber[prescriber$drug_name == "NEXIUM" &
prescriber$nppes_provider_state == "NY",]
pres_summary = fread("https://data.cms.gov/api/views/mxq9-aiiw/rows.csv?accessType=DOWNLOAD",
na.strings = "NA", data.table = FALSE)
# define the response to be a 1 for specialized (Gastroenterology)
# and 0 for general (Internal Medicine)
pres_nex_ny_gastro = pres_nex_ny[pres_nex_ny$specialty_description == "Gastroenterology" |
pres_nex_ny$specialty_description == "Internal Medicine",]
pres_nex_ny_gastro$specialty = ifelse(pres_nex_ny_gastro$specialty_description == "Gastroenterology", 1, 0)
length(unique(pres_nex_ny_gastro$npi))
nrow(pres_nex_ny_gastro)
# npi is the joining id
# the drug name, generic name and specialty (response) are the only variables
# unique to the presriber dataset
joined = inner_join(pres_nex_ny_gastro[c("npi", "drug_name", "generic_name", "specialty")],
pres_summary, by = "npi")
library(dplyr)
# npi is the joining id
# the drug name, generic name and specialty (response) are the only variables
# unique to the presriber dataset
joined = inner_join(pres_nex_ny_gastro[c("npi", "drug_name", "generic_name", "specialty")],
pres_summary, by = "npi")
joined$zip3 = substr(joined$nppes_provider_zip5, 1, 3)
View(joined)
joined$beneficiary_average_risk_score
summary(joined$beneficiary_average_risk_score)
summary(joined$beneficiary_average_risk_score)
is.na(joined$beneficiary_average_risk_score)
joined[!is.na(joined$beneficiary_average_risk_score),] #removes all rows with NA risk score
joined_clean = joined[!is.na(joined$beneficiary_average_risk_score),] #removes all rows with NA risk score
summary(joined_clean$beneficiary_average_risk_score)
summary(joined$average_age_of_beneficiaries)
summary(joined_clean$average_age_of_beneficiaries)
summary(joined_clean$beneficiary_dual_count)
joined_clean$beneficiary_dual_count
library(tidyr)
replace_na(joined_clean$beneficiary_dual_count, 0)
joined_clean$beneficiary_dual_count = replace_na(joined_clean$beneficiary_dual_count, 0)
summary(joined_clean$beneficiary_nondual_count)
joined_clean$beneficiary_nondual_count = replace_na(joined_clean$beneficiary_nondual_count, 0)
summary(joined_clean$beneficiary_average_risk_score)
summary(joined$beneficiary_average_risk_score) # 12 NAs
summary(joined_clean$beneficiary_dual_count) # 392 NAs -- may need a better way to proceed
setwd("C:/Users/HP/OneDrive/Arjun/Mount Sinai/simMetric/physician_compare")
source("class_def.R")
joined_clean$beneficiary_nondual_count = replace_na(joined_clean$beneficiary_nondual_count, 0)
joined_clean$brand_drug_cost
joined_clean$total_drug_cost
summary(joined_clean$total_drug_cost)
summary(joined_clean$nppes_provider_gender)
factor(joined_clean$nppes_provider_gender)
joined$nppes_provider_gender
joined$nppes_provider_gender = factor(joined$nppes_provider_gender)
joined$zip3
factor(substr(joined$nppes_provider_zip5, 1, 3)) #set as factor
order(joined$nppes_provider_zip5)
min(joined$nppes_provider_zip5)
min(as.numeric(joined$nppes_provider_zip5))
as.numeric(joined$nppes_provider_zip5)
factor(joined$nppes_provider_gender)
joined$zip3 = factor(substr(joined$nppes_provider_zip5, 1, 3)) #set as factor, 100 set as base
joined$nppes_provider_gender = factor(joined$nppes_provider_gender) #set as factor, F as base
summary(joined$beneficiary_average_risk_score) # 12 NAs
joined_clean = joined[!is.na(joined$beneficiary_average_risk_score),] #removes all rows with NA risk score
summary(joined_clean$beneficiary_dual_count) # 392 NAs -- may need a better way to proceed
joined_clean$beneficiary_dual_count = replace_na(joined_clean$beneficiary_dual_count, 0)
joined_clean$beneficiary_nondual_count = replace_na(joined_clean$beneficiary_nondual_count, 0)
joined$nppes_provider_gender
joined$total_claim_count
summary(joined$total_claim_count)
summary(joined$bene_count)
summary(joined_clean$bene_count)
LR = glm(specialized ~ beneficiary_average_risk_score + average_age_of_beneficiaries +
zip3 + beneficiary_dual_count + beneficiary_nondual_count + total_drug_cost +
nppes_provider_gender + total_claim_count + bene_count,
data = joined_clean, family = "binomial")
LR = glm(specialty ~ beneficiary_average_risk_score + average_age_of_beneficiaries +
zip3 + beneficiary_dual_count + beneficiary_nondual_count + total_drug_cost +
nppes_provider_gender + total_claim_count + bene_count,
data = joined_clean, family = "binomial")
source("../src/class_def.R")
14^2
25^2
# train-test split - 70/30
set.seed(625)
p = 0.7
train_i = sample(nrow(joined_clean), p*nrow(joined_clean))
train_dat = joined_clean[train_i,]
test_dat = joined_clean[-train_i,]
# define logistic model
LR = glm(specialty ~ beneficiary_average_risk_score + average_age_of_beneficiaries +
zip3 + beneficiary_dual_count + beneficiary_nondual_count + total_drug_cost +
nppes_provider_gender + total_claim_count + bene_count,
data = joined_clean, family = "binomial")
# define logistic model
LR = glm(specialty ~ beneficiary_average_risk_score + average_age_of_beneficiaries +
zip3 + beneficiary_dual_count + beneficiary_nondual_count + total_drug_cost +
nppes_provider_gender + total_claim_count + bene_count,
data = train_dat, family = "binomial")
# use simMetric class
source("../src/class_def.R")
preds = predict(LR, test_dat, type = "response")
SM_LR = simMetric(test_dat$specialized, preds, 1, seq(0.05,0.5,0.05))
SM_LR = simMetric(test_dat$specialty, preds, 1, seq(0.05,0.5,0.05))
auc.simMetric(SM_LR)
brier.simMetric(SM_LR)
save.image("C:/Users/HP/OneDrive/Arjun/Mount Sinai/simMetric/physician_compare/2014_modeling.RData")
library(data.table)
prescriber = fread("https://www.dropbox.com/s/vgdcrxq8fzsik52/Medicare_Provider_Utilization_and_Payment_Data__2013_Part_D_Prescriber.csv.gz",
na.strings = "NA", data.table = FALSE)
View(prescriber)
prescriber = fread("../data/Medicare_Provider_Utilization_and_Payment_Data__2013_Part_D_Prescriber (1).csv.gz",
na.strings = "NA", data.table = FALSE)
View(prescriber)
fread(prescriber)
fread(https://www.dropbox.com/s/vgdcrxq8fzsik52/Medicare_Provider_Utilization_and_Payment_Data__2013_Part_D_Prescriber.csv.gz)
fread("https://www.dropbox.com/s/vgdcrxq8fzsik52/Medicare_Provider_Utilization_and_Payment_Data__2013_Part_D_Prescriber.csv.gz")
read_csv("https://www.dropbox.com/s/vgdcrxq8fzsik52/Medicare_Provider_Utilization_and_Payment_Data__2013_Part_D_Prescriber.csv.gz")
library(readr)
read_csv("https://www.dropbox.com/s/vgdcrxq8fzsik52/Medicare_Provider_Utilization_and_Payment_Data__2013_Part_D_Prescriber.csv.gz")
read.csv("https://www.dropbox.com/s/vgdcrxq8fzsik52/Medicare_Provider_Utilization_and_Payment_Data__2013_Part_D_Prescriber.csv.gz")
read.csv("https://www.dropbox.com/s/vgdcrxq8fzsik52/Medicare_Provider_Utilization_and_Payment_Data__2013_Part_D_Prescriber.csv.gz?dl=1")
prescriber = fread("../data/Medicare_Provider_Utilization_and_Payment_Data__2013_Part_D_Prescriber.csv.gz",
na.strings = "NA", data.table = FALSE)
prescriber = fread("../data/Medicare_Provider_Utilization_and_Payment_Data__2013_Part_D_Prescriber.csv.gz",
na.strings = "NA", data.table = FALSE)
prescriber = fread("../data/Medicare_Provider_Utilization_and_Payment_Data__2013_Part_D_Prescriber.csv.gz",
na.strings = "NA", data.table = FALSE)
View(prescriber)
pres_summary = fread("../data/Medicare_Provider_Utilization_and_Payment_Data__Part_D_Prescriber_Summary_Table_CY2014.csv.gz",
na.strings = "NA", data.table = FALSE)
View(pres_summary)
View(prescriber)
pres_summary = fread("../data/Medicare_Provider_Utilization_and_Payment_Data__Part_D_Prescriber_Summary_Table_CY2013.csv.gz",
na.strings = "NA", data.table = FALSE)
# 2013 dataset with subset of drug_names
prescriber = fread("../data/Medicare_Provider_Utilization_and_Payment_Data__2013_Part_D_Prescriber.csv.gz",
na.strings = "NA", data.table = FALSE)
# 2013 dataset with subset of speciality to "Gastroenterology" or "Internal Medicine"
pres_summary = fread("../data/Medicare_Provider_Utilization_and_Payment_Data__Part_D_Prescriber_Summary_Table_CY2013.csv.gz",
na.strings = "NA", data.table = FALSE)
# subset the data to only include NEXIUM with providers from New York
pres_nex_ny = prescriber[prescriber$drug_name == "NEXIUM" &
prescriber$nppes_provider_state == "NY",]
# define the response to be a 1 for specialized (Gastroenterology)
# and 0 for general (Internal Medicine)
# pres_nex_ny_gastro = pres_nex_ny[pres_nex_ny$specialty_description == "Gastroenterology" |
#                                  pres_nex_ny$specialty_description == "Internal Medicine",]
pres_nex_ny_gastro$specialty = ifelse(pres_summary$specialty_description == "Gastroenterology", 1, 0)
# define the response to be a 1 for specialized (Gastroenterology)
# and 0 for general (Internal Medicine)
# pres_nex_ny_gastro = pres_nex_ny[pres_nex_ny$specialty_description == "Gastroenterology" |
#                                  pres_nex_ny$specialty_description == "Internal Medicine",]
pres_summary$specialty = ifelse(pres_summary$specialty_description == "Gastroenterology", 1, 0)
# npi is the joining id
# the drug name, generic name and specialty (response) are the only variables
# unique to the presriber dataset
joined = inner_join(pres_nex_ny_gastro[c("npi", "drug_name", "generic_name")],
pres_summary, by = "npi")
library(dplyr)
library(tidyr)
# npi is the joining id
# the drug name, generic name and specialty (response) are the only variables
# unique to the presriber dataset
joined = inner_join(pres_nex_ny_gastro[c("npi", "drug_name", "generic_name")],
pres_summary, by = "npi")
# npi is the joining id
# the drug name, generic name and specialty (response) are the only variables
# unique to the presriber dataset
joined = inner_join(pres_nex_ny[c("npi", "drug_name", "generic_name")],
pres_summary, by = "npi")
joined$nppes_provider_zip5
joined$zip3 = factor(substr(joined$nppes_provider_zip5, 1, 3)) #set as factor, 100 set as base
joined$nppes_provider_gender = factor(joined$nppes_provider_gender) #set as factor, F as base
summary(joined$beneficiary_average_risk_score) # 12 NAs
summary(joined$beneficiary_average_risk_score) # 13 NAs
joined_clean = joined[!is.na(joined$beneficiary_average_risk_score),] #removes all rows with NA risk score
summary(joined_clean$beneficiary_dual_count) # 392 NAs -- may need a better way to proceed
summary(joined_clean$beneficiary_dual_count) # 446 NAs -- may need a better way to proceed
joined_clean$beneficiary_dual_count = replace_na(joined_clean$beneficiary_dual_count, 0)
joined_clean$beneficiary_nondual_count = replace_na(joined_clean$beneficiary_nondual_count, 0)
# train-test split - 70/30
set.seed(625)
p = 0.7
train_i = sample(nrow(joined_clean), p*nrow(joined_clean))
train_dat = joined_clean[train_i,]
test_dat = joined_clean[-train_i,]
# define logistic model
LR = glm(specialty ~ beneficiary_average_risk_score + average_age_of_beneficiaries +
zip3 + beneficiary_dual_count + beneficiary_nondual_count + total_drug_cost +
nppes_provider_gender + total_claim_count + bene_count,
data = train_dat, family = "binomial")
preds = predict(LR, test_dat, type = "response")
# use simMetric class
source("../src/class_def.R")
SM_LR = simMetric(test_dat$specialty, preds, 1, seq(0.05,0.5,0.05))
auc.simMetric(SM_LR)
brier.simMetric(SM_LR)
# 2013 dataset with subset of drug_names
prescriber = fread("../data/Medicare_Provider_Utilization_and_Payment_Data__2013_Part_D_Prescriber.csv.gz",
na.strings = "NA", data.table = FALSE)
# 2013 dataset with subset of speciality to "Gastroenterology" or "Internal Medicine"
pres_summary = fread("../data/Medicare_Provider_Utilization_and_Payment_Data__Part_D_Prescriber_Summary_Table_CY2013.csv.gz",
na.strings = "NA", data.table = FALSE)
# subset the data to only include NEXIUM with providers from New York
pres_nex_ny = prescriber[prescriber$drug_name == "NEXIUM" &
prescriber$nppes_provider_state == "NY",]
# define the response to be a 1 for specialized (Gastroenterology)
# and 0 for general (Internal Medicine)
# pres_nex_ny_gastro = pres_nex_ny[pres_nex_ny$specialty_description == "Gastroenterology" |
#                                  pres_nex_ny$specialty_description == "Internal Medicine",]
pres_summary$specialty = ifelse(pres_summary$specialty_description == "Gastroenterology", 1, 0)
# npi is the joining id
# the drug name, generic name and specialty (response) are the only variables
# unique to the presriber dataset
joined = inner_join(pres_nex_ny[c("npi", "drug_name", "generic_name")],
pres_summary, by = "npi")
joined$zip3 = factor(substr(joined$nppes_provider_zip5, 1, 3)) #set as factor, 100 set as base
joined$nppes_provider_gender = factor(joined$nppes_provider_gender) #set as factor, F as base
summary(joined$beneficiary_average_risk_score) # 13 NAs
joined_clean = joined[!is.na(joined$beneficiary_average_risk_score),] #removes all rows with NA risk score
summary(joined_clean$beneficiary_dual_count) # 446 NAs -- may need a better way to proceed
joined_clean$beneficiary_dual_count = replace_na(joined_clean$beneficiary_dual_count, 0)
joined_clean$beneficiary_nondual_count = replace_na(joined_clean$beneficiary_nondual_count, 0)
# train-test split - 70/30
set.seed(625)
p = 0.7
train_i = sample(nrow(joined_clean), p*nrow(joined_clean))
train_dat = joined_clean[train_i,]
test_dat = joined_clean[-train_i,]
# define logistic model
LR = glm(specialty ~ beneficiary_average_risk_score + average_age_of_beneficiaries +
zip3 + beneficiary_dual_count + beneficiary_nondual_count + total_drug_cost +
nppes_provider_gender + total_claim_count + bene_count,
data = train_dat, family = "binomial")
preds = predict(LR, test_dat, type = "response")
# use simMetric class
source("../src/class_def.R")
SM_LR = simMetric(test_dat$specialty, preds, 1, seq(0.05,0.5,0.05))
auc.simMetric(SM_LR)
brier.simMetric(SM_LR)
